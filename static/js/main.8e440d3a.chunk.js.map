{"version":3,"sources":["Tree.js","ItemsCollection.js","CardsCollection.js","Search.js","TagSearch.js","CategorySearch.js","FilterMenu.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Image","require","Carousel","ItemsCollection","MyCarousel","props","showArrows","onChange","onClickItem","onClickThumb","showStatus","img","map","src","CardsCollection","useState","setOpen","Card","Group","centered","data","element","i","visibleProjects","includes","className","Modal","onClose","onOpen","trigger","images","path","img_add_prefix","as","Header","title","Content","image","Actions","Button","onClick","style","width","float","Checkbox","onChangeProject","fontSize","fontWeight","Search","Dropdown","placeholder","fluid","clearable","search","selection","options","this","tags","filterChangedName","TagSearch","multiple","CategorySearch","FilterMenu","e","value","Segment","Grid","container","columns","stackable","Column","basic","formSearchFromArray","categories","projectNames","positive","icon","Icon","name","marginTop","color","h1","paddingTop","paddingBottom","App","state","visibleTags","checkedProjects","filerChosenName","filterChosenCategories","filterChosenTags","filterChosenYears","loading_data","error","handleCheckTag","bind","newExpanded","a","push","getProjectNames","newState","expandedTags","setState","fetch","then","res","console","log","status","json","result","array_0_to_n","length","recountVisibleTags","ans","d","n","list","key","text","updatedCheckedTags","targetNode","checkedTags","content","textAlign","Container","height","Dimmer","active","Loader","indeterminate","inverted","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8e440d3a.chunk.js","sourcesContent":["import React from 'react';\nimport CheckboxTree from 'react-checkbox-tree';\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\nimport './my-style.css';\n\n\nclass Tree extends React.Component\n{\n    state = {\n        //checked: [],\n        //expanded: [],\n    };\n\n    \n\n    render() {\n        return (\n            <CheckboxTree\n                nodes={this.props.nodes}\n                //already set (see below)  checked={this.state.checked}\n                //expanded={this.state.expanded}\n                //onCheck={checked => this.setState({ checked })}\n                onExpand={expanded => this.setState({ expanded })}\n                showNodeIcon={this.props.showNodeIcon}\n                checkOnClick={true}\n                //onClick={() => {}}\n                onCheck={this.props.handleCheckTag}\n                checked={this.props.checked}\n                expanded={this.props.expanded}\n                \n                //onClick={(flag) => {this.props.handleCheckTag([flag])}}\n            />\n        );\n    }\n}\n\nexport default Tree;","import React from \"react\";\nimport {\n  Button,\n  Icon,\n  Image,\n  Item,\n  Label,\n  Modal,\n  Grid,\n  Checkbox,\n} from \"semantic-ui-react\";\nimport { waitForElementToBeRemoved } from \"@testing-library/react\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\n\nconst paragraph = <Image src=\"/images/wireframe/short-paragraph.png\" />;\n\nvar Carousel = require(\"react-responsive-carousel\").Carousel;\n\nfunction MyCarousel(props) {\n  return (\n    <Carousel\n      showArrows={true}\n      onChange={() => {}}\n      onClickItem={() => {}}\n      onClickThumb={() => {}}\n      showStatus={false}\n    >\n      {props.img.map((img) => {\n        return (\n          <div>\n            <img src={img} />\n          </div>\n        );\n      })}\n    </Carousel>\n  );\n}\n\nfunction ItemsCollection(props) {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <div>\n    \n\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>1</Grid.Column>\n          <Grid.Column>2</Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>3</Grid.Column>\n          <Grid.Column>2</Grid.Column>\n        </Grid.Row>\n      </Grid>\n\n      <Item.Group divided>\n        {props.data.map((element, i) => { \n          if (props.visibleProjects.includes(i))\n          return (\n              \n              <Item>\n                <Checkbox className='checkbox-project' onChange={() => props.onChangeProject(i)}/>\n                <Modal\n                  onClose={() => setOpen(false)}\n                  onOpen={() => setOpen(true)}\n                  //open={open}\n                  trigger={\n                    <Item.Image\n                      src={\n                        element.images.map((path) =>\n                        props.img_add_prefix(path)\n                        )[0]\n                      }\n                      as=\"a\"\n                    />\n                  }\n                >\n                  <Modal.Header>{element.title}</Modal.Header>\n                  <Modal.Content image>\n                    <MyCarousel\n                      img={element.images.map((path) =>\n                        props.img_add_prefix(path)\n                      )}\n                    />\n                  </Modal.Content>\n                  <Modal.Actions>\n                    <Button onClick={() => setOpen(false)}>Закрыть</Button>\n                  </Modal.Actions>\n                </Modal>\n\n                <Item.Content>\n                  <Item.Header>{element.title}</Item.Header>\n                  {/* <Item.Meta>\n                    <span>{element.year}</span>\n                  </Item.Meta> */}\n                  <Item.Description>{element.desc2}</Item.Description>\n\n                  {/* <Item.Extra>\n                    {element.tags.map((tag) => {\n                      return <Label>{tag}</Label>;\n                    })}\n                  </Item.Extra> */}\n                </Item.Content>\n                \n              </Item>\n           \n          );\n        })}\n      </Item.Group>\n      \n    </div>\n  );\n}\n\nexport default ItemsCollection;\n","import React from \"react\";\nimport {\n  Button,\n  Icon,\n  Image,\n  Card,\n  Label,\n  Modal,\n  Grid,\n  Checkbox,\n} from \"semantic-ui-react\";\nimport { waitForElementToBeRemoved } from \"@testing-library/react\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\n\nconst paragraph = <Image src=\"/images/wireframe/short-paragraph.png\" />;\n\nvar Carousel = require(\"react-responsive-carousel\").Carousel;\n\nfunction MyCarousel(props) {\n  return (\n    <Carousel\n      showArrows={true}\n      onChange={() => {}}\n      onClickItem={() => {}}\n      onClickThumb={() => {}}\n      showStatus={false}\n    >\n      {props.img.map((img) => {\n        return (\n          <div>\n            <img src={img} />\n          </div>\n        );\n      })}\n    </Carousel>\n  );\n}\n\nfunction CardsCollection(props) {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <div>\n      <Card.Group centered>\n        {props.data.map((element, i) => {\n          if (props.visibleProjects.includes(i))\n            return (\n              <Card className=\"cardd\">\n                <Modal\n                  onClose={() => setOpen(false)}\n                  onOpen={() => setOpen(true)}\n                  //open={open}\n                  trigger={\n                    <Image\n                      src={\n                        element.images.map((path) =>\n                          props.img_add_prefix(path)\n                        )[0]\n                      }\n                      //size='tiny'\n\n                      //floated='right'\n                      as=\"a\"\n                    />\n                  }\n                >\n                  <Modal.Header>{element.title}</Modal.Header>\n                  <Modal.Content image>\n                    <MyCarousel\n                      img={element.images.map((path) =>\n                        props.img_add_prefix(path)\n                      )}\n                    />\n                  </Modal.Content>\n                  <Modal.Actions>\n                    <Button onClick={() => setOpen(false)}>Закрыть</Button>\n                  </Modal.Actions>\n                </Modal>\n                <Card.Content className=\"container-for-vertical\">\n                  {[\"a\"].map(() => {\n                    return (\n                      <div>\n                         <div style={{ width: \"17%\", float: \"left\"}} className='vertical-center-checkbox'> \n                          <Checkbox onChange={() => props.onChangeProject(i)} />\n                        </div>\n\n                        <div style={{ width: \"83%\", float: \"right\",  }} >\n                          <div  className='vertical-center'>\n                          <Card.Header\n                            style={{ fontSize: \"13px\", fontWeight: \"normal\" }}\n                          >\n                            {element.title}\n                          </Card.Header>\n                        </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </Card.Content>\n              </Card>\n            );\n        })}\n      </Card.Group>\n      {/* сделать, чтоыб кликать можно было не только прямо по чекбоксу */}\n    </div>\n  );\n}\n\nexport default CardsCollection;\n","import React from 'react';\nimport { Dropdown } from 'semantic-ui-react'\n\n\n\nclass Search extends React.Component\n{\n    render()\n    {\n        return (\n        <div>\n            <Dropdown\n                placeholder='По названию проекта'\n                fluid\n                //multiple\n                clearable\n                search\n                selection\n                options={this.props.tags}\n                onChange={this.props.filterChangedName}\n            />\n        </div>\n        )\n    }\n}\n\nexport default Search","import React from 'react';\nimport { Dropdown } from 'semantic-ui-react'\n\nclass TagSearch extends React.Component\n{\n    render()\n    {\n        return (\n        <div>\n            <Dropdown\n                placeholder='Теги'\n                fluid\n                multiple\n                clearable\n                search\n                selection\n                options={this.props.tags}\n            />\n        </div>\n        )\n    }\n}\n\nexport default TagSearch","import React from 'react';\nimport { Dropdown } from 'semantic-ui-react'\n\nclass CategorySearch extends React.Component\n{\n    render()\n    {\n        return (\n        <div>\n            <Dropdown\n                placeholder='Категория'\n                fluid\n                multiple\n                //clearable их и так можно чистить\n                search\n                selection\n                options={this.props.tags}\n            />\n        </div>\n        )\n    }\n}\n\nexport default CategorySearch","import React from \"react\";\nimport Search from \"./Search.js\";\nimport TagSearch from \"./TagSearch.js\";\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Item,\n  Label,\n  Input,\n  Menu,\n  Segment,\n  Step,\n  Table,\n  Dropdown,\n  Checkbox,\n} from \"semantic-ui-react\";\nimport CategorySearch from \"./CategorySearch.js\";\n\nclass FilterMenu extends React.Component {\n  filterChangedName(e, value) {\n    //console.log(\"filterchangedname: \" + value.value);\n  }\n\n  render() {\n    return (\n      <Segment>\n        <Grid container columns={4} stackable>\n          <Grid.Column>\n            <Segment basic>\n              <CategorySearch\n                tags={this.props.formSearchFromArray(this.props.categories)}\n              />\n            </Segment>\n          </Grid.Column>\n\n          <Grid.Column>\n            <Segment basic>\n              <TagSearch\n                tags={this.props.formSearchFromArray(this.props.tags)}\n              />\n            </Segment>\n          </Grid.Column>\n\n          <Grid.Column>\n            <Segment basic>\n              <Search //by project name\n                tags={this.props.formSearchFromArray(this.props.projectNames)}\n                filterChangedName={this.filterChangedName}\n              />\n              {/* <Input\n  placeholder=\"2001-2020\"\n  //style={{width: \"83%\", float: \"right\"}}\n\n  //style={{ width: \"30%\", paddingLeft: \"8px\" }}\n/> */}\n              {/* по \n<Input\n  style={{ width: \"30%\" }}\n/> */}\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment basic>\n              <Button fluid positive icon>\n                <Icon name=\"search\" /> &nbsp; Применить фильтры\n              </Button>\n            </Segment>\n          </Grid.Column>\n        </Grid>\n\n        <Grid container columns={4} stackable style={{ marginTop: \"-40px\" }}>\n          <Grid.Column>\n            <Segment basic>\n              <Button fluid>Deselect all</Button>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment basic>\n              <Button fluid>Сбросить фильтры</Button>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment basic>\n              <Button fluid>Добавить в портфолио</Button>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment basic>\n              <Button color=\"orange\" fluid icon>\n                Продолжить &nbsp;\n                <Icon name=\"right arrow\" />\n              </Button>\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    );\n  }\n}\n\n\nexport default FilterMenu;\n","import React from \"react\";\nimport Tree from \"./Tree.js\";\n//import Checkbox from './MyCheckbox.js'\n//import List from './List.js'\nimport ItemsCollection from \"./ItemsCollection.js\";\nimport CardsCollection from \"./CardsCollection.js\";\nimport FilterMenu from \"./FilterMenu.js\";\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Item,\n  Loader,\n  Dimmer,\n  Label,\n  Menu,\n  Segment,\n  Step,\n  Table,\n} from \"semantic-ui-react\";\n\nconst style = {\n  h1: {\n    paddingTop: \"1em\",\n    paddingBottom: \"0.5em\",\n  },\n};\n\nclass App extends React.Component {\n  img_add_prefix(path) {\n    return \"./Images/\" + path;\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      tags: [\n        [\"1.1\", \"1.2\"],\n        [\"2.1\", \"2.2\", \"2.3\", \"2.4\"],\n      ],\n\n      visibleTags: [],\n      checkedProjects: [],\n      projectNames: [],\n      visibleProjects: [],\n\n      filerChosenName: \"\",\n      filterChosenCategories: [],\n      filterChosenTags: [],\n      filterChosenYears: \"\",\n      loading_data: true,\n      error: null,\n    };\n\n    //this.state.checkedTags = new Array(10).fill(0).map(() => []);\n    this.state.visibleTags = this.state.tags;\n    this.handleCheckTag = this.handleCheckTag.bind(this);\n    this.onChangeProject = this.onChangeProject.bind(this);\n\n    let newExpanded = [];\n    for (let a of this.state.tags) {\n      //we need to expand only 1-level checkboxes\n      newExpanded.push(a.value);\n    }\n\n    this.state.projectNames = this.getProjectNames(this.state.data);\n\n    let newState = this.state;\n    newState.expandedTags = newExpanded;\n    this.setState(newState);\n  }\n\n  componentDidMount() //after mount\n  {\n    fetch(\"api/get_data\")\n      .then(res => {\n        console.log(res);\n        if (res.status == 200)\n          return res.json()\n        let newState = this.state\n        newState.loading_data = false;\n        //if it's internal error\n        if (res.status == 500)\n          newState.error = 'Неотловленная ошибка на backend-части, ошибка 500'\n        if (res.status == 404)\n          newState.error = 'Не удалось установить связь с backend-сервером. ошибка 404'\n        this.setState(newState);\n        return null;\n      })\n      .then(\n        (result) => {\n          if (result) {\n            let newState = this.state;\n            newState.data = result.data;\n            newState.categories = result.categories;\n            newState.tags = result.tags;\n            //console.log('data: ' + JSON.stringify(result))\n            newState.loading_data = false;\n            newState.error = result.error;\n            newState.visibleProjects = this.array_0_to_n(newState.data.length);\n            newState.tags = result.tags;\n            console.log('tags got: ' + newState.tags)\n            //console.log('visibleProjects = ' + newState.visibleProjects)\n            this.setState(newState);\n            this.recountVisibleTags();\n          } \n        },\n        (error) => {\n          let newState = this.state;\n          newState.data = [];\n          newState.error = error;\n          newState.loading_data = false;\n          this.setState(newState);\n\n        }\n      )\n  }\n\n  getTime() {\n    console.log(fetch('api/time').then(res => res.json()));\n  }\n\n  recountVisibleTags() {\n    //TODO!!\n    console.log('reconundsds...')\n    this.state.visibleTags = this.state.tags;\n  }\n  recountVisibleProjects() {\n    //TODO!\n\n  }\n\n  onChangeProject(i) {\n    //console.log(\"project changed! \" + i);\n  }\n\n  getProjectNames(data) {\n    let ans = [];\n    if (!data) return ans;\n\n    for (let d of data) {\n      ans.push(d.title);\n    }\n    return ans;\n  }\n\n  array_0_to_n(n) {\n    let ans = []\n    for (let i = 0; i < n; ++i) ans.push(i);\n    return ans;\n  }\n\n  formSearchFromArray(list) {\n    console.log(\"list = \" + list);\n    let ans = [];\n    let i = 0;\n    if (!list) return ans;\n    for (let a of list) {\n      ans.push({\n        key: a,\n        value: i,\n        text: a,\n      });\n      ++i;\n    }\n    return ans;\n  }\n\n  handleCheckTag(updatedCheckedTags, targetNode) {\n    //console.log('handleCheckTag(' + newChecked + ')')\n    let newState = this.state;\n\n    //newState.checkedTags[i] = updatedCheckedTags;\n    newState.checkedTags = updatedCheckedTags;\n    this.setState(newState);\n  }\n\n  render() {\n    return (<div>\n      <Header\n        as=\"h1\"\n        content=\"Генератор портфолио\"\n        style={\n          style.h1\n        }\n        textAlign=\"center\" />\n\n\n      <Container>\n        <Segment.Group >\n          <FilterMenu\n            projectNames={this.state.projectNames}\n            formSearchFromArray={this.formSearchFromArray}\n            categories={this.state.categories}\n            tags={this.state.visibleTags}\n            filerChosenName={this.state.filerChosenName}\n            filterChosenCategories={this.state.filterChosenCategories}\n            filterChosenTags={this.state.filterChosenTags}\n            filterChosenYears={this.state.filterChosenYears}\n          />\n\n          <Segment>\n            {this.state.loading_data ?\n\n              <div style={{ height: \"350px\" }}>\n                <Dimmer active>\n                  <Loader indeterminate> Подгружаем файлы из Excel-таблицы</Loader>\n                </Dimmer>\n              </div>\n              :\n              (this.state.error ?\n                <div style={{ height: \"350px\" }}>\n                  <Dimmer active>\n                    <Header as='h2' icon inverted>Ошибка при загрузке данных из Excel-таблицы</Header>\n                    <Segment inverted color='red'>  {this.state.error.toString()} </Segment>\n\n                    <Segment color='' inverted>{'Полученные данные: ' + this.state.data}</Segment>\n\n                  </Dimmer>\n                </div>\n                : <CardsCollection data={\n                  this.state.data\n                }\n                  img_add_prefix={\n                    this.img_add_prefix\n                  }\n                  onChangeProject={\n                    this.onChangeProject\n                  }\n                  visibleProjects={\n                    this.state.visibleProjects\n                  }\n                />)}\n\n            {/* {console.log('state.error = ' + this.state.error)} */}\n\n          </Segment>\n        </Segment.Group>\n      </Container>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui/dist/semantic.min.css';\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}